{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3200aa72-5629-4976-86d0-f1f0793d0038",
   "metadata": {},
   "source": [
    "Complex ICESat-2 Queries in the cloud\n",
    "===============================\n",
    "\n",
    "Although the data referenced in here is stored as columnar parquet files, there is a [compatible raster rotation of the tessalation](https://ui.adsabs.harvard.edu/link_gateway/2007MNRAS.381..865C/doi:10.1111/j.1365-2966.2007.12297.x) that keeps the same indexing and nesting structure. Tiling 2 and 3 dimensional arrays at defined chunk intervals may be an elegent way for data fusion across gridded and non-gridded large environmental data sets.  \n",
    "\n",
    "Reproducing this notebook\n",
    "-------------------------\n",
    "\n",
    "The data in this notebook lives in the cloud, and is 'free' to access, in that it does not require payment to me. But it does require an AWS account, and amazon will charge you for compute. The data transfer cost will likely not be noticeable if you are in the US West-2 region where we are hosting it... but might be pricey if you cross regions or try and export it at volume outside of the cloud.\n",
    "\n",
    "I use an instance with 256GB of ram to run this notebook; the first data pull is 'small' at ~20GB in memory. The second pull is over 100GB of memory, and will crash the kernel and dask if you are on too small of a machine. Everything here is under development, but particularly the indexing scheme, which has already changed. The most recent version of [healpix morton indexing](https://doi.org/10.1016/j.heliyon.2017.e00332) is at the [mortie library](https://github.com/espg/mortie)... but it produces breaking changes will not work with the data reference in this notebook (i.e., the data already stored in S3), which is why the old functions are replicated instead of imported.\n",
    "\n",
    "One obvious way to run this as a smaller notebook would be to modify to only grab a single orbital period; as written, this grabs a two year time series for each of the basins.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ee405995-b870-4e25-881e-060def8c1109",
   "metadata": {},
   "outputs": [],
   "source": [
    "import vaex\n",
    "\n",
    "import numpy as np\n",
    "from numpy import r_\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import mhealpy as mh\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "from numba import jit, int64, vectorize\n",
    "\n",
    "from dask_gateway import Gateway"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "17e31546-8fdd-4158-975c-3abbf5a430b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "    <div style=\"width: 24px; height: 24px; background-color: #e1e1e1; border: 3px solid #9D9D9D; border-radius: 5px; position: absolute;\"> </div>\n",
       "    <div style=\"margin-left: 48px;\">\n",
       "        <h3 style=\"margin-bottom: 0px;\">Client</h3>\n",
       "        <p style=\"color: #9D9D9D; margin-bottom: 0px;\">Client-00e1c11b-5982-11ed-957e-02fed3e5ba98</p>\n",
       "        <table style=\"width: 100%; text-align: left;\">\n",
       "\n",
       "        <tr>\n",
       "        \n",
       "            <td style=\"text-align: left;\"><strong>Connection method:</strong> Cluster object</td>\n",
       "            <td style=\"text-align: left;\"><strong>Cluster type:</strong> dask_gateway.GatewayCluster</td>\n",
       "        \n",
       "        </tr>\n",
       "\n",
       "        \n",
       "            <tr>\n",
       "                <td style=\"text-align: left;\">\n",
       "                    <strong>Dashboard: </strong> <a href=\"/services/dask-gateway/clusters/prod.1115cf8cd0e9418283b3a6207e42bb95/status\" target=\"_blank\">/services/dask-gateway/clusters/prod.1115cf8cd0e9418283b3a6207e42bb95/status</a>\n",
       "                </td>\n",
       "                <td style=\"text-align: left;\"></td>\n",
       "            </tr>\n",
       "        \n",
       "\n",
       "        </table>\n",
       "\n",
       "        \n",
       "            <details>\n",
       "            <summary style=\"margin-bottom: 20px;\"><h3 style=\"display: inline;\">Cluster Info</h3></summary>\n",
       "            <div style='background-color: #f2f2f2; display: inline-block; padding: 10px; border: 1px solid #999999;'>\n",
       "  <h3>GatewayCluster</h3>\n",
       "  <ul>\n",
       "    <li><b>Name: </b>prod.1115cf8cd0e9418283b3a6207e42bb95\n",
       "    <li><b>Dashboard: </b><a href='/services/dask-gateway/clusters/prod.1115cf8cd0e9418283b3a6207e42bb95/status' target='_blank'>/services/dask-gateway/clusters/prod.1115cf8cd0e9418283b3a6207e42bb95/status</a>\n",
       "  </ul>\n",
       "</div>\n",
       "\n",
       "            </details>\n",
       "        \n",
       "\n",
       "    </div>\n",
       "</div>"
      ],
      "text/plain": [
       "<Client: 'tls://192.168.10.186:8786' processes=0 threads=0, memory=0 B>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gateway = Gateway()\n",
    "options = gateway.cluster_options()\n",
    "options.worker_specification = '4CPU, 16GB'\n",
    "cluster = gateway.new_cluster(options)\n",
    "cluster.scale(32)\n",
    "client = cluster.get_client(set_as_default=True)\n",
    "client"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ee649e7-6532-4334-8acc-b10ed91e2483",
   "metadata": {
    "tags": []
   },
   "source": [
    "Tiling\n",
    "--------\n",
    "\n",
    "The [mhealpy](https://mhealpy.readthedocs.io/) library is an superset of the [healpy](https://healpy.readthedocs.io/) library that adds support for multiresolution healpix maps. The astronomy community uses a different indexing scheme then the 'morton' ordering used in this notebook. There's actually three different schemes that are provided for: `ring`, `nested` and `uniq`, with the first two being fixed resolution, and the last being multiresolution.\n",
    "\n",
    "There are facilities for converting between to representations, and certain index methods are optimized for different types of plotting methods. We use the optimized healpix code, and then convert from nested format to morton indexing.\n",
    "\n",
    "A few things to note here--\n",
    "\n",
    "1. The data has already been tiled and uploaded; what is being shown is traversing the morton/healpix embedding space tree to retrieve that data. How to write the data shards is a post for another day.\n",
    "2. All of the functions in the next cell are out of date; the mortie library has an updated number scheme that fixes several bugs, and marks southern hemisphere data as negative integers. However, the S3 shards were uploading using this previous scheme, so we're using old functions to index to that data structure.\n",
    "3. The shard and chunk sizes add 2 levels to the tree. An updated data upload would add an addition tree level for the S3 partitions. The reason will be apparent later on; we're downloading quite a lot of data for fine scale queries. This would be an even more pronounced issue if this was ATL03 data.\n",
    "\n",
    "In other words, the next update to this will break the numbering scheme here, change tree depth, and be more amenable to ATL03 data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "321d5b83-4a40-4ebb-820c-852549e47350",
   "metadata": {},
   "outputs": [],
   "source": [
    "# These are old and outdated\n",
    "def unique2parent(unique):\n",
    "    '''\n",
    "    Assumes input is UNIQ\n",
    "    Currently only works on single resolution\n",
    "    Returns parent base cell\n",
    "    '''\n",
    "    nside = mh.uniq2nside(unique)\n",
    "    if nside.all():\n",
    "        order = int(np.log2(nside.max()))\n",
    "    unique = unique // 4**(order-1)\n",
    "    parent = (unique - 16) // 4\n",
    "    return parent\n",
    "\n",
    "def heal_norm(base, order, addr_nest):\n",
    "    N_pix = mh.hp.order2nside(order)**2\n",
    "    addr_norm = addr_nest - (base * N_pix)\n",
    "    return addr_norm\n",
    "\n",
    "@vectorize([int64(int64, int64, int64)])\n",
    "def fastNorm2Mort(order, normed, parents):\n",
    "    # General version, for arbitary order\n",
    "    if order > 18:\n",
    "        raise ValueError(\"Max order is 18 (to output to 64-bit int).\")\n",
    "    mask = np.int64(3*4**(order-1))\n",
    "    res = np.zeros(order,dtype=np.int64)\n",
    "    num = 0\n",
    "    for j, i in enumerate(range(order, 0, -1)):\n",
    "        nextBit = (normed & mask) >> ((2*i) - 2)\n",
    "        num += (nextBit+1) * 10**(i-1)\n",
    "        mask = mask >> 2\n",
    "    if parents is not None:\n",
    "        parents = parents- 6\n",
    "        parents = parents * 10**(order)\n",
    "        num = num + parents\n",
    "    return num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e7bc29b9-64d0-489b-97ab-2ba25d99da03",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read in drainage basin polylines\n",
    "# Source: http://icesat4.gsfc.nasa.gov/cryo_data/drainage_divides/Ant_Grounded_DrainageSystem_Polygons.txt\n",
    "basins = pd.read_csv('./Ant_Grounded_DrainageSystem_Polygons.txt', \n",
    "                     delim_whitespace=True, \n",
    "                     names = ['Lat', 'Lon', 'basin'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b2783518-4028-4a3e-b45a-f0c3ab73c6f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lon</th>\n",
       "      <th>basin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-74.525273</td>\n",
       "      <td>-61.122545</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-74.525435</td>\n",
       "      <td>-61.123664</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-74.525467</td>\n",
       "      <td>-61.123826</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-74.525576</td>\n",
       "      <td>-61.124567</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-74.525609</td>\n",
       "      <td>-61.124498</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1238996</th>\n",
       "      <td>-74.523392</td>\n",
       "      <td>-61.109736</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1238997</th>\n",
       "      <td>-74.523938</td>\n",
       "      <td>-61.113444</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1238998</th>\n",
       "      <td>-74.524484</td>\n",
       "      <td>-61.117151</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1238999</th>\n",
       "      <td>-74.525030</td>\n",
       "      <td>-61.120859</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1239000</th>\n",
       "      <td>-74.525273</td>\n",
       "      <td>-61.122545</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1239001 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               Lat        Lon  basin\n",
       "0       -74.525273 -61.122545      1\n",
       "1       -74.525435 -61.123664      1\n",
       "2       -74.525467 -61.123826      1\n",
       "3       -74.525576 -61.124567      1\n",
       "4       -74.525609 -61.124498      1\n",
       "...            ...        ...    ...\n",
       "1238996 -74.523392 -61.109736     27\n",
       "1238997 -74.523938 -61.113444     27\n",
       "1238998 -74.524484 -61.117151     27\n",
       "1238999 -74.525030 -61.120859     27\n",
       "1239000 -74.525273 -61.122545     27\n",
       "\n",
       "[1239001 rows x 3 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "basins"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe933122-e532-4613-ab34-9b639f0bdcf2",
   "metadata": {},
   "source": [
    "Querying Data\n",
    "-------------\n",
    "<img src=\"https://earth.gsfc.nasa.gov/sites/default/files/lab_cryo/data/polar_ice_altimetry/antarctic_and_greenland_drainage_systems/ant_icesatdsmaps_fig_1.jpg\" alt=\"basins\" width=\"600\"/>\n",
    "\n",
    "Healpix spatial queries occur seperate from the data; all that we need to do is define the grid cell resolution:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ae91d141-253c-47f7-8900-341aca928874",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6508.1853 km at tesselation order 0\n",
      "3254.09265 km at tesselation order 1\n",
      "1627.046325 km at tesselation order 2\n",
      "813.5231625 km at tesselation order 3\n",
      "406.76158125 km at tesselation order 4\n",
      "203.380790625 km at tesselation order 5\n",
      "101.6903953125 km at tesselation order 6\n",
      "50.84519765625 km at tesselation order 7\n",
      "25.422598828125 km at tesselation order 8\n",
      "12.7112994140625 km at tesselation order 9\n",
      "6.35564970703125 km at tesselation order 10\n",
      "3.177824853515625 km at tesselation order 11\n",
      "1.5889124267578125 km at tesselation order 12\n",
      "0.7944562133789063 km at tesselation order 13\n",
      "0.39722810668945313 km at tesselation order 14\n",
      "0.19861405334472657 km at tesselation order 15\n",
      "0.09930702667236328 km at tesselation order 16\n",
      "0.04965351333618164 km at tesselation order 17\n",
      "0.02482675666809082 km at tesselation order 18\n",
      "0.01241337833404541 km at tesselation order 19\n"
     ]
    }
   ],
   "source": [
    "def order2res(order):\n",
    "    res = 111* 58.6323*.5**order\n",
    "    return res\n",
    "\n",
    "for res in range(20):\n",
    "    print(str(order2res(res))+ ' km at tesselation order ' + str(res))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b3a37b1-16dc-4ccc-8440-72f0a2524b0f",
   "metadata": {},
   "source": [
    "Requesting an 'order' of 11 will select grid cells that roughly 3km per side. However, the healpix query only guarantees that the observation is *somewhere* in that cell; we don't know if it is at the edge, or at center. Going up one order of resolution doesn't solve this problem for us-- if we want to execute a 'buffer', we need to calculate a neighborhood function. Fortunately, the base healpix library provides functions to do this, and we can cast the results to the morton numbering scheme. The neighborhood function will return all of the cells touching cell that the observation is present in, so calling it at order 11 will return a 9km area about the observation location, with a guarantee of at least 3km of buffer in every direction. This is quite fast:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7509d8a0-07fb-4edd-9d2e-9ea0eb8dbe94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 24.6 ms, sys: 0 ns, total: 24.6 ms\n",
      "Wall time: 20.6 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# Set order\n",
    "order = 11\n",
    "# Subset basin 2\n",
    "b2 = basins[basins.basin == 2]\n",
    "# Get all nieghbors\n",
    "B2_11 = mh.hp.pixelfunc.get_all_neighbours(2**order, b2.Lon.values, \n",
    "                                           b2.Lat.values, nest=True, \n",
    "                                           lonlat=True)\n",
    "# Drop repeats\n",
    "Basin2_11 = np.unique(B2_11.ravel())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0eedfb87-22db-4d7e-aa5d-2203ac7e3344",
   "metadata": {},
   "source": [
    "Again, with healpix the *query* is separate from the data, and we can visualize what our cells will look like, even if we don't know *a priori* if those cells actually have anything inside them:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "040e3350-2a1a-4c2f-9556-86d375ab4f70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 580x640 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "nside = 2**11\n",
    "m = np.zeros(mh.hp.nside2npix(nside))\n",
    "m[Basin2_11.ravel()] += 1\n",
    "mh.hp.gnomview(m, rot=[0,-90], xsize=800, ysize=800, nest=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "839174a4-5b8f-46a6-9b7a-6add3ade60a0",
   "metadata": {},
   "source": [
    "That's our 3km buffer for basin 2.\n",
    "\n",
    "Our parquet data is sharded and stored at a different resolution; we can down-sample our result to figure out the S3 paths that we need to download to get the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9da557c3-3c82-49e7-8399-4248bcb8481e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2.28 ms, sys: 0 ns, total: 2.28 ms\n",
      "Wall time: 1.86 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# Convert to Morton indexing\n",
    "order = 11\n",
    "uniq = mh.nest2uniq(2**order, Basin2_11)\n",
    "parents = unique2parent(uniq)\n",
    "normed = heal_norm(parents,order, uniq)\n",
    "# Get 'full' resolution \n",
    "mortonsB2_11 = fastNorm2Mort(order,normed.ravel(), parents.ravel())\n",
    "# Degrade to shard resolution\n",
    "Basin2_6 = mortonsB2_11 // 10**5\n",
    "Basin2_6 = np.unique(Basin2_6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1bb3fc25-04cc-43d8-98db-e112312913ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6106, 64)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(mortonsB2_11), len(Basin2_6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "cee4e1e3-4726-4269-9c2c-1605cf9de148",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 580x640 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Approximate view of data in S3\n",
    "nside = 2**6\n",
    "b2idx = mh.hp.ang2pix(nside,b2.Lon.values, b2.Lat.values, lonlat=True) \n",
    "m = np.zeros(mh.hp.nside2npix(nside))\n",
    "m[np.unique(b2idx).ravel()] += 1\n",
    "# Centered on the south pole\n",
    "mh.hp.gnomview(m, rot=[0,-90], xsize=800, ysize=800)# , nest=True)\n",
    "print(len(np.unique(b2idx).ravel()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "662d5a56-c568-4c3e-b1c9-a9ccdf6e6a26",
   "metadata": {},
   "source": [
    "We can see that the basin outline for 3km resolution is split over 6,106 'cells', but those cells are in turn split over 64 parquet files-- at most, the pole hole actually results in some empty shards. \n",
    "\n",
    "You might notice a discrepancy above-- there's 64 parquet files, but the plot above only shows 60 shards plotted. That's because when we degraded to the shard resolution, we did it off the 3km buffer, which crossed over to a few adjacent cells... 4 of which pushed to adjacent shards. By doing the buffer at the higher resolution we don't miss any potential points, but also don't over subscribe to unneeded shards if we did the buffer at the lower resolution.\n",
    "\n",
    "We can build the file list in a loop, and get the data in parallel on distributed workers:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a34daada-0cf5-48ff-be81-d724dd0533d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "cycles = ['4','5','6','7','8','9','10','11']\n",
    "prefix = 's3://geostacks/icesat_2/shards='\n",
    "mid = '/cycle=' \n",
    "suffix = '/atl06.parquet'\n",
    "\n",
    "filelist = []\n",
    "\n",
    "for i in Basin2_6:\n",
    "    for j in cycles:\n",
    "        s3path = prefix + str(i) + mid + j + suffix\n",
    "        filelist.append(s3path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ef97fe63-b133-4193-9623-2c51f79fe0a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "512"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 64 shards repeated for years / 8 cycles\n",
    "len(filelist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4881177-f0fe-4020-b914-6ec7851cf25b",
   "metadata": {},
   "source": [
    "We could request all the data be returned using this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e5f0d168-1be7-41fe-98bd-5a77df355a88",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_thing_full(s3file):\n",
    "    return vaex.open(s3file).to_arrow_table()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d1f6423-6267-4e53-8a63-594a1e9c8426",
   "metadata": {},
   "source": [
    "...but we'll go one step further and do the subsetting on the workers as well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9a604000-16ab-4eb6-9f3d-50b8230a1905",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_thing(s3file, cells):\n",
    "    df = vaex.open(s3file)\n",
    "    # Get to our query resolution\n",
    "    df['midx11'] = df.midx // 10**7\n",
    "    df['basin2'] = df.midx11.isin(cells)\n",
    "    df.select(df.basin2 == True)\n",
    "    tmp = df.to_arrow_table(selection=True, parallel=True)\n",
    "    return tmp"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42b1f3cd-463d-4a78-9cf9-0f8c0a054796",
   "metadata": {},
   "source": [
    "The next cell will fail if the cluster workers aren't spun up yet, so it's good practice to check if they're online... and to resubmit the scale call if not. The failure is related to the semantics of `scatter`, which expects to distribute the data to workers at execution time. This is different than `client.submit`, which will be more than happy to submit jobs to non-existent workers; the jobs will just queue until workers come online without error. For the latter case, sometimes this will actually speed up worker allocation, as ad hoc workers tend to activate faster when they **know** there is work for them!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1b924d66-1fb5-41b1-8bf6-09150b8b3856",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<strong>Future: ndarray</strong>\n",
       "<span style=\"color: var(--jp-ui-font-color2, gray)\"> status: </span>\n",
       "\n",
       "\n",
       "<span style=\"color: var(--jp-error-color0, black)\">finished</span>,\n",
       "\n",
       "\n",
       "\n",
       "<span style=\"color: var(--jp-ui-font-color2, gray)\"> type:</span> numpy.ndarray,\n",
       "\n",
       "\n",
       "<span style=\"color: var(--jp-ui-font-color2, gray)\"> key:</span> ndarray-56609e93e968cc406bde452fcdc64f7d"
      ],
      "text/plain": [
       "<Future: finished, type: numpy.ndarray, key: ndarray-56609e93e968cc406bde452fcdc64f7d>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "client.scatter(mortonsB2_11, broadcast=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "37d0fb08-5775-4bca-bf15-3328d26e6019",
   "metadata": {},
   "outputs": [],
   "source": [
    "futures = []\n",
    "for thing in filelist:\n",
    "    futures.append(client.submit(get_thing, thing, mortonsB2_11, retries=10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3c80a9c7-d8bc-407b-a155-25fa63859f46",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ~22GB return\n",
    "quiver = list(filter(None, client.gather(futures, errors='skip', direct=True)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "dc102393-fd89-40f8-a632-1dfeb2a5f83e",
   "metadata": {},
   "outputs": [],
   "source": [
    "big_list = []\n",
    "for arrow in quiver:\n",
    "    big_list.append(vaex.from_arrow_table(arrow))\n",
    "\n",
    "df = vaex.concat(big_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b7c9b66a-3ad4-4499-9581-3583cc3464e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>#                                      </th><th>id     </th><th>lat               </th><th>lon                </th><th>slope_y               </th><th>slope_x               </th><th>slope_x_sigma         </th><th>h_li             </th><th>s_li                </th><th>q_flag  </th><th>s_fg  </th><th>snr  </th><th>h_rb               </th><th>bsnow_conf  </th><th>cloud_flg_asr  </th><th>cloud_flg_atm  </th><th>msw_flag  </th><th>fbsnow_h          </th><th>bsnow_od            </th><th>layer_flag  </th><th>bckgrd         </th><th>e_bckgrd  </th><th>n_fit_photons  </th><th>w_surface_window_final  </th><th>t_year                    </th><th>track  </th><th>x                 </th><th>y                 </th><th>midx               </th><th>shards  </th><th>cycle  </th><th>midx11      </th><th>basin2  </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td><i style='opacity: 0.6'>0</i>          </td><td>1523093</td><td>-86.14954851360491</td><td>33.92593579210944  </td><td>-0.0395953431725502   </td><td>0.00046188640408217907</td><td>0.0006559690809808671 </td><td>2939.65185546875 </td><td>0.012169521301984787</td><td>0       </td><td>0     </td><td>0.0  </td><td>0.16256438195705414</td><td>6           </td><td>2              </td><td>0              </td><td>4         </td><td>56.94702911376953 </td><td>0.07961465418338776 </td><td>1           </td><td>23297.232421875</td><td>0.0       </td><td>482            </td><td>3.0                     </td><td>2019-07-10 02:32:02.307540</td><td>gt1l   </td><td>232881.35931420964</td><td>346225.37644100154</td><td>2111134242242111122</td><td>2111134 </td><td>4      </td><td>211113424224</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>1</i>          </td><td>1523094</td><td>-86.14939581927959</td><td>33.92457007097016  </td><td>-0.06023023650050163  </td><td>-0.006562550086528063 </td><td>0.0006581993075087667 </td><td>2939.58447265625 </td><td>0.01336896326392889 </td><td>0       </td><td>0     </td><td>0.0  </td><td>0.1646553874015808 </td><td>6           </td><td>2              </td><td>0              </td><td>4         </td><td>59.05659103393555 </td><td>0.08079415559768677 </td><td>1           </td><td>25988.84375    </td><td>0.0       </td><td>465            </td><td>3.0                     </td><td>2019-07-10 02:32:02.310355</td><td>gt1l   </td><td>232882.34804547214</td><td>346244.66751049814</td><td>2111134242242111124</td><td>2111134 </td><td>4      </td><td>211113424224</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>2</i>          </td><td>1523095</td><td>-86.14924304204673</td><td>33.92320645695685  </td><td>-0.06262587010860443  </td><td>-0.003759956220164895 </td><td>0.0007193252677097917 </td><td>2939.484375      </td><td>0.013828647322952747</td><td>0       </td><td>0     </td><td>0.0  </td><td>0.18167147040367126</td><td>6           </td><td>2              </td><td>0              </td><td>4         </td><td>58.752349853515625</td><td>0.08070683479309082 </td><td>1           </td><td>27742.94921875 </td><td>0.0       </td><td>461            </td><td>3.0                     </td><td>2019-07-10 02:32:02.313168</td><td>gt1l   </td><td>232883.35374213205</td><td>346263.95772095054</td><td>2111134242242111142</td><td>2111134 </td><td>4      </td><td>211113424224</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>3</i>          </td><td>1523096</td><td>-86.14909011053149</td><td>33.92184672722354  </td><td>-0.025539278984069824 </td><td>0.008118819445371628  </td><td>0.0006527432706207037 </td><td>2939.517578125   </td><td>0.012108918279409409</td><td>0       </td><td>0     </td><td>0.0  </td><td>0.16191399097442627</td><td>6           </td><td>2              </td><td>0              </td><td>4         </td><td>56.649208068847656</td><td>0.07967527210712433 </td><td>1           </td><td>28792.603515625</td><td>0.0       </td><td>475            </td><td>3.0                     </td><td>2019-07-10 02:32:02.315974</td><td>gt1l   </td><td>232884.39146603562</td><td>346283.2462720065 </td><td>2111134242242111142</td><td>2111134 </td><td>4      </td><td>211113424224</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>4</i>          </td><td>1523097</td><td>-86.14893700260534</td><td>33.92049143181697  </td><td>-0.03492480516433716  </td><td>0.011287172324955463  </td><td>0.0006484501645900309 </td><td>2939.72021484375 </td><td>0.012137381359934807</td><td>0       </td><td>0     </td><td>0.0  </td><td>0.16041499376296997</td><td>6           </td><td>2              </td><td>0              </td><td>4         </td><td>54.551910400390625</td><td>0.07864658534526825 </td><td>1           </td><td>24003.869140625</td><td>0.0       </td><td>487            </td><td>3.0                     </td><td>2019-07-10 02:32:02.318772</td><td>gt1l   </td><td>232885.46588380224</td><td>346302.53291968664</td><td>2111134242242111144</td><td>2111134 </td><td>4      </td><td>211113424224</td><td>True    </td></tr>\n",
       "<tr><td>...                                    </td><td>...    </td><td>...               </td><td>...                </td><td>...                   </td><td>...                   </td><td>...                   </td><td>...              </td><td>...                 </td><td>...     </td><td>...   </td><td>...  </td><td>...                </td><td>...         </td><td>...            </td><td>...            </td><td>...       </td><td>...               </td><td>...                 </td><td>...         </td><td>...            </td><td>...       </td><td>...            </td><td>...                     </td><td>...                       </td><td>...    </td><td>...               </td><td>...               </td><td>...                </td><td>...     </td><td>...    </td><td>...         </td><td>...     </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>116,343,239</i></td><td>1549043</td><td>-81.82003381242077</td><td>-49.04448300989648 </td><td>4.835084837395698e-05 </td><td>0.0017873976612463593 </td><td>0.0004322136810515076 </td><td>88.74310302734375</td><td>0.007835650816559792</td><td>0       </td><td>0     </td><td>0.0  </td><td>0.10365600883960724</td><td>-1          </td><td>2              </td><td>1              </td><td>1         </td><td>29.979246139526367</td><td>0.028110453858971596</td><td>1           </td><td>148184.5625    </td><td>0.0       </td><td>424            </td><td>3.0                     </td><td>2021-06-11 21:24:54.182550</td><td>gt3r   </td><td>-670302.7729052545</td><td>581772.2705912268 </td><td>5111432111414434313</td><td>5111432 </td><td>11     </td><td>511143211141</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>116,343,240</i></td><td>1549044</td><td>-81.81986157860989</td><td>-49.04480402632936 </td><td>0.0001920364156831056 </td><td>-0.0016964105889201164</td><td>0.000489795405883342  </td><td>88.74688720703125</td><td>0.007848388515412807</td><td>0       </td><td>0     </td><td>0.0  </td><td>0.11242944747209549</td><td>-1          </td><td>2              </td><td>1              </td><td>1         </td><td>29.979246139526367</td><td>0.027972066774964333</td><td>1           </td><td>146144.84375   </td><td>0.0       </td><td>426            </td><td>3.0                     </td><td>2021-06-11 21:24:54.185357</td><td>gt3r   </td><td>-670320.1922462292</td><td>581780.8045149728 </td><td>5111432111414434314</td><td>5111432 </td><td>11     </td><td>511143211141</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>116,343,241</i></td><td>1549045</td><td>-81.81968929358989</td><td>-49.04512368181247 </td><td>0.0005683625931851566 </td><td>0.0004018144973088056 </td><td>0.0005003189435228705 </td><td>88.71788024902344</td><td>0.009416015818715096</td><td>0       </td><td>0     </td><td>0.0  </td><td>0.11978613585233688</td><td>-1          </td><td>2              </td><td>1              </td><td>1         </td><td>29.979246139526367</td><td>0.027833567932248116</td><td>1           </td><td>131252.15625   </td><td>0.0       </td><td>426            </td><td>3.0                     </td><td>2021-06-11 21:24:54.188167</td><td>gt3r   </td><td>-670337.6020975797</td><td>581789.3578408199 </td><td>5111432111414434332</td><td>5111432 </td><td>11     </td><td>511143211141</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>116,343,242</i></td><td>1549046</td><td>-81.81951694599303</td><td>-49.04544167739985 </td><td>0.0005571695510298014 </td><td>0.001968930708244443  </td><td>0.00044805006473325193</td><td>88.7217788696289 </td><td>0.007712152320891619</td><td>0       </td><td>0     </td><td>0.0  </td><td>0.10411503911018372</td><td>-1          </td><td>2              </td><td>1              </td><td>1         </td><td>29.979246139526367</td><td>0.027694901451468468</td><td>1           </td><td>128720.234375  </td><td>0.0       </td><td>439            </td><td>3.0                     </td><td>2021-06-11 21:24:54.190980</td><td>gt3r   </td><td>-670355.0003577591</td><td>581797.9348786987 </td><td>5111432111414434334</td><td>5111432 </td><td>11     </td><td>511143211141</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>116,343,243</i></td><td>1549047</td><td>-81.81934457364784</td><td>-49.045759009733075</td><td>-7.287902553798631e-05</td><td>-0.0009209429263137281</td><td>0.00045299253542907536</td><td>88.7392578125    </td><td>0.00943058729171753 </td><td>0       </td><td>0     </td><td>0.0  </td><td>0.11246149241924286</td><td>-1          </td><td>2              </td><td>1              </td><td>1         </td><td>29.979246139526367</td><td>0.02755611203610897 </td><td>1           </td><td>135125.71875   </td><td>0.0       </td><td>458            </td><td>3.0                     </td><td>2021-06-11 21:24:54.193796</td><td>gt3r   </td><td>-670372.3940364019</td><td>581806.5212699741 </td><td>5111432111414434334</td><td>5111432 </td><td>11     </td><td>511143211141</td><td>True    </td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "#            id       lat                 lon                  slope_y                 slope_x                 slope_x_sigma           h_li               s_li                  q_flag    s_fg    snr    h_rb                 bsnow_conf    cloud_flg_asr    cloud_flg_atm    msw_flag    fbsnow_h            bsnow_od              layer_flag    bckgrd           e_bckgrd    n_fit_photons    w_surface_window_final    t_year                      track    x                   y                   midx                 shards    cycle    midx11        basin2\n",
       "0            1523093  -86.14954851360491  33.92593579210944    -0.0395953431725502     0.00046188640408217907  0.0006559690809808671   2939.65185546875   0.012169521301984787  0         0       0.0    0.16256438195705414  6             2                0                4           56.94702911376953   0.07961465418338776   1             23297.232421875  0.0         482              3.0                       2019-07-10 02:32:02.307540  gt1l     232881.35931420964  346225.37644100154  2111134242242111122  2111134   4        211113424224  True\n",
       "1            1523094  -86.14939581927959  33.92457007097016    -0.06023023650050163    -0.006562550086528063   0.0006581993075087667   2939.58447265625   0.01336896326392889   0         0       0.0    0.1646553874015808   6             2                0                4           59.05659103393555   0.08079415559768677   1             25988.84375      0.0         465              3.0                       2019-07-10 02:32:02.310355  gt1l     232882.34804547214  346244.66751049814  2111134242242111124  2111134   4        211113424224  True\n",
       "2            1523095  -86.14924304204673  33.92320645695685    -0.06262587010860443    -0.003759956220164895   0.0007193252677097917   2939.484375        0.013828647322952747  0         0       0.0    0.18167147040367126  6             2                0                4           58.752349853515625  0.08070683479309082   1             27742.94921875   0.0         461              3.0                       2019-07-10 02:32:02.313168  gt1l     232883.35374213205  346263.95772095054  2111134242242111142  2111134   4        211113424224  True\n",
       "3            1523096  -86.14909011053149  33.92184672722354    -0.025539278984069824   0.008118819445371628    0.0006527432706207037   2939.517578125     0.012108918279409409  0         0       0.0    0.16191399097442627  6             2                0                4           56.649208068847656  0.07967527210712433   1             28792.603515625  0.0         475              3.0                       2019-07-10 02:32:02.315974  gt1l     232884.39146603562  346283.2462720065   2111134242242111142  2111134   4        211113424224  True\n",
       "4            1523097  -86.14893700260534  33.92049143181697    -0.03492480516433716    0.011287172324955463    0.0006484501645900309   2939.72021484375   0.012137381359934807  0         0       0.0    0.16041499376296997  6             2                0                4           54.551910400390625  0.07864658534526825   1             24003.869140625  0.0         487              3.0                       2019-07-10 02:32:02.318772  gt1l     232885.46588380224  346302.53291968664  2111134242242111144  2111134   4        211113424224  True\n",
n",
       "116,343,239  1549043  -81.82003381242077  -49.04448300989648   4.835084837395698e-05   0.0017873976612463593   0.0004322136810515076   88.74310302734375  0.007835650816559792  0         0       0.0    0.10365600883960724  -1            2                1                1           29.979246139526367  0.028110453858971596  1             148184.5625      0.0         424              3.0                       2021-06-11 21:24:54.182550  gt3r     -670302.7729052545  581772.2705912268   5111432111414434313  5111432   11       511143211141  True\n",
       "116,343,240  1549044  -81.81986157860989  -49.04480402632936   0.0001920364156831056   -0.0016964105889201164  0.000489795405883342    88.74688720703125  0.007848388515412807  0         0       0.0    0.11242944747209549  -1            2                1                1           29.979246139526367  0.027972066774964333  1             146144.84375     0.0         426              3.0                       2021-06-11 21:24:54.185357  gt3r     -670320.1922462292  581780.8045149728   5111432111414434314  5111432   11       511143211141  True\n",
       "116,343,241  1549045  -81.81968929358989  -49.04512368181247   0.0005683625931851566   0.0004018144973088056   0.0005003189435228705   88.71788024902344  0.009416015818715096  0         0       0.0    0.11978613585233688  -1            2                1                1           29.979246139526367  0.027833567932248116  1             131252.15625     0.0         426              3.0                       2021-06-11 21:24:54.188167  gt3r     -670337.6020975797  581789.3578408199   5111432111414434332  5111432   11       511143211141  True\n",
       "116,343,242  1549046  -81.81951694599303  -49.04544167739985   0.0005571695510298014   0.001968930708244443    0.00044805006473325193  88.7217788696289   0.007712152320891619  0         0       0.0    0.10411503911018372  -1            2                1                1           29.979246139526367  0.027694901451468468  1             128720.234375    0.0         439              3.0                       2021-06-11 21:24:54.190980  gt3r     -670355.0003577591  581797.9348786987   5111432111414434334  5111432   11       511143211141  True\n",
       "116,343,243  1549047  -81.81934457364784  -49.045759009733075  -7.287902553798631e-05  -0.0009209429263137281  0.00045299253542907536  88.7392578125      0.00943058729171753   0         0       0.0    0.11246149241924286  -1            2                1                1           29.979246139526367  0.02755611203610897   1             135125.71875     0.0         458              3.0                       2021-06-11 21:24:54.193796  gt3r     -670372.3940364019  581806.5212699741   5111432111414434334  5111432   11       511143211141  True"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6525894a-6ca6-463f-b9bc-1237263f12df",
   "metadata": {},
   "source": [
    "We can also do the same for **all** of the basins, and do a 3km buffer for the entire continent:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ff7c402c-2572-44d7-95c2-4eecf2b3e0e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 353 ms, sys: 29.4 ms, total: 382 ms\n",
      "Wall time: 381 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# Set order\n",
    "order = 11\n",
    "# Get all neighbors\n",
    "B11 = mh.hp.pixelfunc.get_all_neighbours(2**order, basins.Lon.values, \n",
    "                                           basins.Lat.values, nest=True, \n",
    "                                           lonlat=True)\n",
    "# Drop repeats\n",
    "B_11 = np.unique(B11.ravel())\n",
    "\n",
    "uniq = mh.nest2uniq(2**order, B_11)\n",
    "parents = unique2parent(uniq)\n",
    "normed = heal_norm(parents,order, uniq)\n",
    "# Get 'full' resolution \n",
    "mortons11 = fastNorm2Mort(order,normed.ravel(), parents.ravel())\n",
    "# Degrade to shard resolution\n",
    "Basin11 = mortons11 // 10**5\n",
    "Basin11 = np.unique(Basin11)\n",
    "\n",
    "cycles = ['4','5','6','7','8','9','10','11']\n",
    "prefix = 's3://geostacks/icesat_2/shards='\n",
    "mid = '/cycle=' \n",
    "suffix = '/atl06.parquet'\n",
    "\n",
    "filelist = []\n",
    "\n",
    "for i in Basin11:\n",
    "    for j in cycles:\n",
    "        s3path = prefix + str(i) + mid + j + suffix\n",
    "        filelist.append(s3path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2e5cd2ed-a45c-4ed9-b120-2c754d9e4db8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5432"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(filelist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "0cd24517-9a58-4322-be40-80e18932517a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<strong>Future: ndarray</strong>\n",
       "<span style=\"color: var(--jp-ui-font-color2, gray)\"> status: </span>\n",
       "\n",
       "\n",
       "<span style=\"color: var(--jp-error-color0, black)\">finished</span>,\n",
       "\n",
       "\n",
       "\n",
       "<span style=\"color: var(--jp-ui-font-color2, gray)\"> type:</span> numpy.ndarray,\n",
       "\n",
       "\n",
       "<span style=\"color: var(--jp-ui-font-color2, gray)\"> key:</span> ndarray-45290d95a6ffdfd8d6e31725309b1ea1"
      ],
      "text/plain": [
       "<Future: finished, type: numpy.ndarray, key: ndarray-45290d95a6ffdfd8d6e31725309b1ea1>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "client.scatter(mortons11, broadcast=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ecf3e9ac-4399-4191-898d-9c51452544af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e348f9974c954c908f602b0c2a05c522",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/10 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2min 59s, sys: 1min 2s, total: 4min 2s\n",
      "Wall time: 24min 8s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "results = []\n",
    "for thing in filelist:\n",
    "    results.append(client.submit(get_thing, thing, mortons11, retries=10))\n",
    "    \n",
    "# extra logic for bigger dataset-- start download to host pre-emptively\n",
    "lst = np.array_split(results, 10)\n",
    "big_list = []\n",
    "for thing in tqdm(lst):\n",
    "    futures = thing.tolist()\n",
    "    quiver = list(filter(None, client.gather(futures, errors='skip', direct=True)))\n",
    "    for future in futures:\n",
    "        future.cancel()\n",
    "    for arrow in quiver:\n",
    "        big_list.append(vaex.from_arrow_table(arrow))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50b1b8fe-2435-454f-92d0-45edf8502385",
   "metadata": {},
   "source": [
    "Slightly different logic for the larger run-- we're chunking the download into 10 partitions, and asynchronously transferring the data back as it completes. This does three things:\n",
    "\n",
    "1. Avoids brittle behavior in dask, which likes to crash when you start to exceed a dozen or so data GB to transfer in one go\n",
    "2. Speeds up the computation by allowing us to send results back parallel to additional computation occurring\n",
    "3. Clears the results off of the workers, which frees memory-- this allows us to save money by sizing smaller workers\n",
    "\n",
    "Note that not only is the download from S3 data stores occurring in parallel, but also the filtering of the subsets is also occurring on the worker for more efficient horizontal scaling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c1f7e0e7-9c25-45e7-ad12-9a2bd0b2303d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = vaex.concat(big_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "aa57dbf0-9601-43d3-b9ef-a6a1b7c2ea9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th>#                                      </th><th>id     </th><th>lat               </th><th>lon               </th><th>slope_y               </th><th>slope_x               </th><th>slope_x_sigma        </th><th>h_li             </th><th>s_li                </th><th>q_flag  </th><th>s_fg  </th><th>snr  </th><th>h_rb               </th><th>bsnow_conf  </th><th>cloud_flg_asr  </th><th>cloud_flg_atm  </th><th>msw_flag  </th><th>fbsnow_h          </th><th>bsnow_od           </th><th>layer_flag  </th><th>bckgrd         </th><th>e_bckgrd  </th><th>n_fit_photons  </th><th>w_surface_window_final  </th><th>t_year                    </th><th>track  </th><th>x                  </th><th>y                 </th><th>midx               </th><th>shards  </th><th>cycle  </th><th>midx11      </th><th>basin2  </th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td><i style='opacity: 0.6'>0</i>          </td><td>1523093</td><td>-86.14954851360491</td><td>33.92593579210944 </td><td>-0.0395953431725502   </td><td>0.00046188640408217907</td><td>0.0006559690809808671</td><td>2939.65185546875 </td><td>0.012169521301984787</td><td>0       </td><td>0     </td><td>0.0  </td><td>0.16256438195705414</td><td>6           </td><td>2              </td><td>0              </td><td>4         </td><td>56.94702911376953 </td><td>0.07961465418338776</td><td>1           </td><td>23297.232421875</td><td>0.0       </td><td>482            </td><td>3.0                     </td><td>2019-07-10 02:32:02.307540</td><td>gt1l   </td><td>232881.35931420964 </td><td>346225.37644100154</td><td>2111134242242111122</td><td>2111134 </td><td>4      </td><td>211113424224</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>1</i>          </td><td>1523094</td><td>-86.14939581927959</td><td>33.92457007097016 </td><td>-0.06023023650050163  </td><td>-0.006562550086528063 </td><td>0.0006581993075087667</td><td>2939.58447265625 </td><td>0.01336896326392889 </td><td>0       </td><td>0     </td><td>0.0  </td><td>0.1646553874015808 </td><td>6           </td><td>2              </td><td>0              </td><td>4         </td><td>59.05659103393555 </td><td>0.08079415559768677</td><td>1           </td><td>25988.84375    </td><td>0.0       </td><td>465            </td><td>3.0                     </td><td>2019-07-10 02:32:02.310355</td><td>gt1l   </td><td>232882.34804547214 </td><td>346244.66751049814</td><td>2111134242242111124</td><td>2111134 </td><td>4      </td><td>211113424224</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>2</i>          </td><td>1523095</td><td>-86.14924304204673</td><td>33.92320645695685 </td><td>-0.06262587010860443  </td><td>-0.003759956220164895 </td><td>0.0007193252677097917</td><td>2939.484375      </td><td>0.013828647322952747</td><td>0       </td><td>0     </td><td>0.0  </td><td>0.18167147040367126</td><td>6           </td><td>2              </td><td>0              </td><td>4         </td><td>58.752349853515625</td><td>0.08070683479309082</td><td>1           </td><td>27742.94921875 </td><td>0.0       </td><td>461            </td><td>3.0                     </td><td>2019-07-10 02:32:02.313168</td><td>gt1l   </td><td>232883.35374213205 </td><td>346263.95772095054</td><td>2111134242242111142</td><td>2111134 </td><td>4      </td><td>211113424224</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>3</i>          </td><td>1523096</td><td>-86.14909011053149</td><td>33.92184672722354 </td><td>-0.025539278984069824 </td><td>0.008118819445371628  </td><td>0.0006527432706207037</td><td>2939.517578125   </td><td>0.012108918279409409</td><td>0       </td><td>0     </td><td>0.0  </td><td>0.16191399097442627</td><td>6           </td><td>2              </td><td>0              </td><td>4         </td><td>56.649208068847656</td><td>0.07967527210712433</td><td>1           </td><td>28792.603515625</td><td>0.0       </td><td>475            </td><td>3.0                     </td><td>2019-07-10 02:32:02.315974</td><td>gt1l   </td><td>232884.39146603562 </td><td>346283.2462720065 </td><td>2111134242242111142</td><td>2111134 </td><td>4      </td><td>211113424224</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>4</i>          </td><td>1523097</td><td>-86.14893700260534</td><td>33.92049143181697 </td><td>-0.03492480516433716  </td><td>0.011287172324955463  </td><td>0.0006484501645900309</td><td>2939.72021484375 </td><td>0.012137381359934807</td><td>0       </td><td>0     </td><td>0.0  </td><td>0.16041499376296997</td><td>6           </td><td>2              </td><td>0              </td><td>4         </td><td>54.551910400390625</td><td>0.07864658534526825</td><td>1           </td><td>24003.869140625</td><td>0.0       </td><td>487            </td><td>3.0                     </td><td>2019-07-10 02:32:02.318772</td><td>gt1l   </td><td>232885.46588380224 </td><td>346302.53291968664</td><td>2111134242242111144</td><td>2111134 </td><td>4      </td><td>211113424224</td><td>True    </td></tr>\n",
       "<tr><td>...                                    </td><td>...    </td><td>...               </td><td>...               </td><td>...                   </td><td>...                   </td><td>...                  </td><td>...              </td><td>...                 </td><td>...     </td><td>...   </td><td>...  </td><td>...                </td><td>...         </td><td>...            </td><td>...            </td><td>...       </td><td>...               </td><td>...                </td><td>...         </td><td>...            </td><td>...       </td><td>...            </td><td>...                     </td><td>...                       </td><td>...    </td><td>...                </td><td>...               </td><td>...                </td><td>...     </td><td>...    </td><td>...         </td><td>...     </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>502,554,965</i></td><td>1643664</td><td>-65.1595352894234 </td><td>-64.14736624840631</td><td>3.4028234663852886e+38</td><td>0.4343118965625763    </td><td>0.08810029178857803  </td><td>814.0770263671875</td><td>2.443772315979004   </td><td>1       </td><td>2     </td><td>0.0  </td><td>5.0                </td><td>127         </td><td>5              </td><td>1              </td><td>3         </td><td>29.979246139526367</td><td>-2.748199462890625 </td><td>1           </td><td>95096.1171875  </td><td>0.0       </td><td>32             </td><td>30.0                    </td><td>2021-06-02 22:11:39.206742</td><td>gt3r   </td><td>-2458716.895432818 </td><td>1191377.9171924246</td><td>5134112212142221244</td><td>5134112 </td><td>11     </td><td>513411221214</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>502,554,966</i></td><td>1643665</td><td>-65.1593575757191 </td><td>-64.14740984828781</td><td>3.4028234663852886e+38</td><td>-1.3402669429779053   </td><td>0.09628021717071533  </td><td>794.2894897460938</td><td>2.651156425476074   </td><td>1       </td><td>2     </td><td>0.0  </td><td>5.0                </td><td>127         </td><td>5              </td><td>1              </td><td>3         </td><td>29.979246139526367</td><td>-2.748805522918701 </td><td>1           </td><td>94514.2890625  </td><td>0.0       </td><td>30             </td><td>34.18221664428711       </td><td>2021-06-02 22:11:39.209570</td><td>gt3r   </td><td>-2458735.934009656 </td><td>1191384.8320884425</td><td>5134112212142221422</td><td>5134112 </td><td>11     </td><td>513411221214</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>502,554,967</i></td><td>1643666</td><td>-65.15917990299222</td><td>-64.14745429112405</td><td>0.026572395116090775  </td><td>0.13136883080005646   </td><td>0.09426511079072952  </td><td>778.3578491210938</td><td>2.0801053047180176  </td><td>1       </td><td>2     </td><td>0.0  </td><td>5.0                </td><td>127         </td><td>5              </td><td>1              </td><td>3         </td><td>29.979246139526367</td><td>-2.749412775039673 </td><td>1           </td><td>98183.234375   </td><td>0.0       </td><td>25             </td><td>30.0                    </td><td>2021-06-02 22:11:39.212404</td><td>gt3r   </td><td>-2458754.985957636 </td><td>1191391.7087620741</td><td>5134112212142221424</td><td>5134112 </td><td>11     </td><td>513411221214</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>502,554,968</i></td><td>1643667</td><td>-65.15900240514684</td><td>-64.14750247559053</td><td>3.4028234663852886e+38</td><td>0.4388608932495117    </td><td>0.06979343295097351  </td><td>782.5272216796875</td><td>1.838956356048584   </td><td>1       </td><td>2     </td><td>0.0  </td><td>5.0                </td><td>127         </td><td>5              </td><td>1              </td><td>3         </td><td>29.979246139526367</td><td>-2.750018835067749 </td><td>1           </td><td>105618.1640625 </td><td>0.0       </td><td>39             </td><td>30.0                    </td><td>2021-06-02 22:11:39.215232</td><td>gt3r   </td><td>-2458774.0978894485</td><td>1191398.4161995882</td><td>5134112212142222313</td><td>5134112 </td><td>11     </td><td>513411221214</td><td>True    </td></tr>\n",
       "<tr><td><i style='opacity: 0.6'>502,554,969</i></td><td>1643668</td><td>-65.15882489514628</td><td>-64.14755037468672</td><td>3.4028234663852886e+38</td><td>0.23369531333446503   </td><td>0.07562870532274246  </td><td>785.801025390625 </td><td>2.3799521923065186  </td><td>1       </td><td>2     </td><td>0.0  </td><td>5.0                </td><td>127         </td><td>5              </td><td>1              </td><td>3         </td><td>29.979246139526367</td><td>-2.7506251335144043</td><td>1           </td><td>106303.5546875 </td><td>0.0       </td><td>39             </td><td>30.0                    </td><td>2021-06-02 22:11:39.218061</td><td>gt3r   </td><td>-2458793.2051524017</td><td>1191405.1364588912</td><td>5134112212142222331</td><td>5134112 </td><td>11     </td><td>513411221214</td><td>True    </td></tr>\n",
       "</tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "#            id       lat                 lon                 slope_y                 slope_x                 slope_x_sigma          h_li               s_li                  q_flag    s_fg    snr    h_rb                 bsnow_conf    cloud_flg_asr    cloud_flg_atm    msw_flag    fbsnow_h            bsnow_od             layer_flag    bckgrd           e_bckgrd    n_fit_photons    w_surface_window_final    t_year                      track    x                    y                   midx                 shards    cycle    midx11        basin2\n",
       "0            1523093  -86.14954851360491  33.92593579210944   -0.0395953431725502     0.00046188640408217907  0.0006559690809808671  2939.65185546875   0.012169521301984787  0         0       0.0    0.16256438195705414  6             2                0                4           56.94702911376953   0.07961465418338776  1             23297.232421875  0.0         482              3.0                       2019-07-10 02:32:02.307540  gt1l     232881.35931420964   346225.37644100154  2111134242242111122  2111134   4        211113424224  True\n",
       "1            1523094  -86.14939581927959  33.92457007097016   -0.06023023650050163    -0.006562550086528063   0.0006581993075087667  2939.58447265625   0.01336896326392889   0         0       0.0    0.1646553874015808   6             2                0                4           59.05659103393555   0.08079415559768677  1             25988.84375      0.0         465              3.0                       2019-07-10 02:32:02.310355  gt1l     232882.34804547214   346244.66751049814  2111134242242111124  2111134   4        211113424224  True\n",
       "2            1523095  -86.14924304204673  33.92320645695685   -0.06262587010860443    -0.003759956220164895   0.0007193252677097917  2939.484375        0.013828647322952747  0         0       0.0    0.18167147040367126  6             2                0                4           58.752349853515625  0.08070683479309082  1             27742.94921875   0.0         461              3.0                       2019-07-10 02:32:02.313168  gt1l     232883.35374213205   346263.95772095054  2111134242242111142  2111134   4        211113424224  True\n",
       "3            1523096  -86.14909011053149  33.92184672722354   -0.025539278984069824   0.008118819445371628    0.0006527432706207037  2939.517578125     0.012108918279409409  0         0       0.0    0.16191399097442627  6             2                0                4           56.649208068847656  0.07967527210712433  1             28792.603515625  0.0         475              3.0                       2019-07-10 02:32:02.315974  gt1l     232884.39146603562   346283.2462720065   2111134242242111142  2111134   4        211113424224  True\n",
       "4            1523097  -86.14893700260534  33.92049143181697   -0.03492480516433716    0.011287172324955463    0.0006484501645900309  2939.72021484375   0.012137381359934807  0         0       0.0    0.16041499376296997  6             2                0                4           54.551910400390625  0.07864658534526825  1             24003.869140625  0.0         487              3.0                       2019-07-10 02:32:02.318772  gt1l     232885.46588380224   346302.53291968664  2111134242242111144  2111134   4        211113424224  True\n",
n",
       "502,554,965  1643664  -65.1595352894234   -64.14736624840631  3.4028234663852886e+38  0.4343118965625763      0.08810029178857803    814.0770263671875  2.443772315979004     1         2       0.0    5.0                  127           5                1                3           29.979246139526367  -2.748199462890625   1             95096.1171875    0.0         32               30.0                      2021-06-02 22:11:39.206742  gt3r     -2458716.895432818   1191377.9171924246  5134112212142221244  5134112   11       513411221214  True\n",
       "502,554,966  1643665  -65.1593575757191   -64.14740984828781  3.4028234663852886e+38  -1.3402669429779053     0.09628021717071533    794.2894897460938  2.651156425476074     1         2       0.0    5.0                  127           5                1                3           29.979246139526367  -2.748805522918701   1             94514.2890625    0.0         30               34.18221664428711         2021-06-02 22:11:39.209570  gt3r     -2458735.934009656   1191384.8320884425  5134112212142221422  5134112   11       513411221214  True\n",
       "502,554,967  1643666  -65.15917990299222  -64.14745429112405  0.026572395116090775    0.13136883080005646     0.09426511079072952    778.3578491210938  2.0801053047180176    1         2       0.0    5.0                  127           5                1                3           29.979246139526367  -2.749412775039673   1             98183.234375     0.0         25               30.0                      2021-06-02 22:11:39.212404  gt3r     -2458754.985957636   1191391.7087620741  5134112212142221424  5134112   11       513411221214  True\n",
       "502,554,968  1643667  -65.15900240514684  -64.14750247559053  3.4028234663852886e+38  0.4388608932495117      0.06979343295097351    782.5272216796875  1.838956356048584     1         2       0.0    5.0                  127           5                1                3           29.979246139526367  -2.750018835067749   1             105618.1640625   0.0         39               30.0                      2021-06-02 22:11:39.215232  gt3r     -2458774.0978894485  1191398.4161995882  5134112212142222313  5134112   11       513411221214  True\n",
       "502,554,969  1643668  -65.15882489514628  -64.14755037468672  3.4028234663852886e+38  0.23369531333446503     0.07562870532274246    785.801025390625   2.3799521923065186    1         2       0.0    5.0                  127           5                1                3           29.979246139526367  -2.7506251335144043  1             106303.5546875   0.0         39               30.0                      2021-06-02 22:11:39.218061  gt3r     -2458793.2051524017  1191405.1364588912  5134112212142222331  5134112   11       513411221214  True"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b08d25c-73da-492b-875b-e938a3e280bd",
   "metadata": {},
   "source": [
    "It's difficult to describe exactly how computationally complicated the above query is. In plain language, we've taken all of the drainage basins borders and applied a ~3km buffer about them, and extracted that data over 8 orbital cycles-- two full years of ICESat-2 data. The original data files were *time ordered*, such that each file was a roughly north/south transect going to or from the pole. Because the drainage basins span the full continent and are complex polylines, it's hard to tell how many ICESat-2 data granules they touch... but a good estimate would be most (i.e., well over half) of them. There's ~4,000 hdf5 data files per 91-day orbit repeat that covers Antarctica, so for 8 orbit repetitions we can safely assume over 10,000 files having data in them related to this query, although I suspect it's likely even more files. Of course, you'd need a way to execute the metadata query to know which ones to open; or you'd need to inspect all 16,000 of them.\n",
    "\n",
    "Above we've subset a half billion data points from a set that was over 10 billion, culling through a few terabytes of data to retrieve the ~100GB that we actually care about. Run times vary, but seem to be between 15 and 30 minutes, although one run finished in under 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f52aa03e-126e-43f1-9d06-707314e088fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "nside = 2**18\n",
    "\n",
    "def convertcoords(lon, lat):\n",
    "    healp = mh.hp.ang2pix(nside, lon, lat, nest=True, lonlat=True)\n",
    "    return healp\n",
    "\n",
    "# Convert locations to healpix\n",
    "df['nest'] = df.apply(convertcoords, arguments=[df.lon, df.lat])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1166d6ce-6584-4450-b63d-ef751bd07e59",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Takes a bit of time to process the nest coordinates for the next few plots...\n",
    "# ...it is a billion numbers to convert!\n",
    "nside = 2**18\n",
    "m = np.zeros(mh.hp.nside2npix(nside))\n",
    "m[df['nest'].to_numpy().ravel()] += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "a8579aeb-4661-4234-9797-34516e2ee23d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 580x640 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Showing the Antarctic Peninsula where \n",
    "# ICESat-2 is within 3km of the basin boundary\n",
    "mh.hp.gnomview(m, rot=[-50,-75], xsize=800, ysize=800, nest=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7fba10bb-dfd8-4d2d-ab35-b9fa89bcfba1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 580x640 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# More inland, by basins 2 and 18, same zoom\n",
    "mh.hp.gnomview(m, rot=[20,-90], xsize=800, ysize=800, nest=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "10effbaa-1579-414f-9e35-b278405d34ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 580x640 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Higher zoom to see more detail\n",
    "mh.hp.gnomview(m, rot=[20,-90], xsize=500, ysize=500, nest=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "815e0b4e-a647-4561-9cfa-bd5dfa811242",
   "metadata": {},
   "source": [
    "That thin band in the center adjacent to dense observation coverage is actually the pole hole. Why are there observations in the hole? Because the first orbital cycle had pointing issues and wasn't looking nadir for a few overpasses and partially filled it in..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b5c87021-7ed8-4f79-bd72-ae7bf58c450d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 580x640 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# half a billion points, sparse over the continent\n",
    "mh.hp.gnomview(m, rot=[0,-90], xsize=1800, ysize=1800, nest=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd79320b-6863-4e64-9133-51fbf539f03e",
   "metadata": {},
   "source": [
    "Next Steps\n",
    "----------\n",
    "\n",
    "Healpix, and by extension morton ordering, does one thing exceedingly well-- it separates the *searching of space* from the *searching of data*... although if you store your data using the morton numbers as your directory and file hierarchy, you are effectively doing both.\n",
    "\n",
    "The morton indexing here sits on a software stack; JPL maintains the base compiled distribution of the healpix library, which is written mostly in fortran and C/C++. Healpy serves as the primary interface (and documentation source), wrapping the numeric routines in python, and providing numerous convenience functions. The mhealpy library provides support for multiresolution functions-- especially plotting. Finally, the mortie library that I've been developing brings morton indexing which casts the 'nest' and 'unique' orderings as a more intuitive Hilbert space filling curve that combines both the resolution and location of each address into a single number.\n",
    "\n",
    "The base JPL library provides fast conversion routines, and also three search methods:\n",
    "\n",
    "1. Neighbor query. This is what we use in this notebook to make sure our buffer is valid and not missing data by chance.\n",
    "2. Disk query, in radians. Not shown, but a very common spatial indexing operator.\n",
    "3. Polygon query\n",
    "\n",
    "Sadly, the last of these query methods is less robust than I had originally hoped. There are constraints, specifically, that the query polygons need to be convex. This makes the function much less useful, serving potentially as a fast preprocess filter at the cost of additional code complexity. There seem to be two potential fixes-- first is in vaex, which has methods for checking for point in polygon. Since vaex is multithreaded by default, and handles large amounts of data well, this is probably the quickest way to enable complex polygon query. I will post a follow up notebook that investigates this functionality, although it will likely be suboptimal in the polar regions if it assumes Euclidean geometry (which most point in polygon algorithms do). \n",
    "\n",
    "The second option is that the morton reference paper mentions a polygon query method distinct from the base healpix routine. It is not clear to me if the algorithm avoids the non-convex restrictions of the JPL implementation, but it is certainly worth exploring. I am also convinced that the adjacency relations mean that there is a recursive algorithm to fill in the polygon in a fast and efficient way-- at the expense of not allowing any 'holes' or 'multipart' polygons, which seems like a reasonable trade off.\n",
    "\n",
    "Of course, the more immediate things to do are to update the indexing schema to match the new release of mortie, add the additional level to the tree depth, and experiment with ingesting the much larger ATL03 data.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b0d7697",
   "metadata": {},
   "source": [
    ".. post:: 04 Nov, 2022"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
